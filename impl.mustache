{{>partial_header}}
package {{packageName}}


import (
	"context"
	"github.com/sherlockhua/koala/middleware/logid"
	"github.com/gin-gonic/gin"
	{{#apiInfo}}{{#apis}}{{#imports}}
	"{{import}}"
	{{/imports}}{{/apis}}{{/apiInfo}}
)


{{#apiInfo}}{{#apis}}
// {{classname}}Servicer defines the api actions for the {{classname}} service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
{{/apis}}{{/apiInfo}}
type ApiServiceImp struct { 
}


func NewApiService()ApiService {
	return &ApiServiceImp{}
}


func (p *ApiServiceImp) InstallMiddleware(engine *gin.Engine) {
	// Add middleware here
	//engine.Use(gin.Logger())
    //engine.Use(gin.Recovery())
    //engine.Use(cors.Default())
    //engine.Use(gzip.Gzip(gzip.DefaultCompression))
    //engine.Use(jwt.AuthMiddleware(jwt.New(jwt.SigningMethodHS256, []byte("your_secret_key"))))
    //engine.Use(httprate.Limit(httprate.NewLimiter(httprate.Every(time.Minute), 100)))
	engine.Use(logid.LogIDMiddleware())
}

{{#apiInfo}}{{#apis}}
//{{classname}}Servicer
{{#operations}}
	{{#operation}}
	{{#isDeprecated}}
	// Deprecated
	{{/isDeprecated}}
func (p *ApiServiceImp) {{operationId}}(ctx context.Context{{#allParams}}, {{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}}{{/allParams}}) ({{#returnType}}result {{^isArray}}{{^returnTypeIsPrimitive}}{{^isResponseFile}}*{{/isResponseFile}}{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}code int, err error) {
	return 
}

{{/operation}}
{{/operations}}
{{/apis}}{{/apiInfo}}


