{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"github.com/gin-gonic/gin"
	{{#hasBodyParams}}
	{{/hasBodyParams}}
	{{#isBodyParam}}
	    {{^required}}
	"errors"
	"io"
	    {{/required}}
	{{/isBodyParam}}
	"net/http"
	"strings"
{{#imports}}	"{{import}}"
	{{/imports}}
)
{{/operations}}

// {{classname}}Controller binds http requests to an api service and writes the service results to the http response
type {{classname}}Controller struct {
	service {{classname}}Servicer
	errorHandler ErrorHandler
}

// {{classname}}Option for how the controller is set up.
type {{classname}}Option func(*{{classname}}Controller)

// With{{classname}}ErrorHandler inject ErrorHandler into controller
func With{{classname}}ErrorHandler(h ErrorHandler) {{classname}}Option {
	return func(c *{{classname}}Controller) {
		c.errorHandler = h
	}
}

// New{{classname}}Controller creates a default api controller
func New{{classname}}Controller(s {{classname}}Servicer, opts ...{{classname}}Option) *{{classname}}Controller {
	controller := &{{classname}}Controller{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the {{classname}}Controller
func (c *{{classname}}Controller) Routes() Routes {
	return Routes{
{{#operations}}
	{{#operation}}
		"{{operationId}}": Route{
			strings.ToUpper("{{httpMethod}}"),
			"{{{basePathWithoutHost}}}{{{path}}}",
			c.{{operationId}},
		},
	{{/operation}}
{{/operations}}
	}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (c *{{classname}}Controller) {{nickname}}(ctx *gin.Context) {
	{{#hasFormParams}}
	{{#isMultipart}}
	 if err := ctx.Request.ParseMultipartForm(32 << 20); err!= nil {
            c.errorHandler(ctx, &ParsingError{Err: err})
            return
    }
	{{/isMultipart}}
	{{^isMultipart}}
	 if err := ctx.Request.ParseForm(); err!= nil {
            c.errorHandler(ctx, &ParsingError{Err: err})
            return
    }
	{{/isMultipart}}
	{{/hasFormParams}}

	{{#routers}}
		{{#mux}}
			{{#hasPathParams}}
	params := ctx.Param
			{{/hasPathParams}}
		{{/mux}}
	{{/routers}}

	{{#hasQueryParams}}
	query := ctx.Request.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
	{{#isPathParam}}
	{{#isNumber}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		{{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isNumber}}
	{{#isFloat}}
	{{paramName}}Param, err := parseNumericParameter[float32](
		{{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float32]({{defaultValue}}, parseFloat32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float32](parseFloat32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float32](parseFloat32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isFloat}}
	{{#isDouble}}
	{{paramName}}Param, err := parseNumericParameter[float64](
		{{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[float64]({{defaultValue}}, parseFloat64),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[float64](parseFloat64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[float64](parseFloat64),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isDouble}}
	{{#isLong}}
	{{paramName}}Param, err := parseNumericParameter[int64](
		{{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[int64]({{defaultValue}}, parseInt64),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[int64](parseInt64),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[int64](parseInt64),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isLong}}
	{{#isInteger}}
	{{paramName}}Param, err := parseNumericParameter[int32](
		{{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}},{{#defaultValue}}
		WithDefaultOrParse[int32]({{defaultValue}}, parseInt32),{{/defaultValue}}{{^defaultValue}}{{#required}}
		WithRequire[int32](parseInt32),{{/required}}{{/defaultValue}}{{^defaultValue}}{{^required}}
		WithParse[int32](parseInt32),{{/required}}{{/defaultValue}}{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isInteger}}
	{{#isDateTime}}
	{{paramName}}Param, err := parseTime({{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}})
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isDateTime}}
	{{^isNumber}}
	{{^isFloat}}
	{{^isDouble}}
	{{^isLong}}
	{{^isInteger}}
	{{^isDateTime}}
	{{^isEnumRef}}
	{{paramName}}Param := {{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}}
	if {{paramName}}Param == "" {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: ErrValueIsNullString})
		return
	}
	{{/isEnumRef}}
	{{#isEnumRef}}
	{{paramName}}Param, err := New{{dataType}}FromValue({{#routers}}{{#mux}}params("{{baseName}}"){{/mux}}{{#chi}}chi.URLParam(r, "{{baseName}}"){{/chi}}{{/routers}})
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isEnumRef}}
	{{/isDateTime}}
	{{/isInteger}}
	{{/isLong}}
	{{/isDouble}}
	{{/isFloat}}
	{{/isNumber}}
	{{/isPathParam}}
	{{#isQueryParam}}
	{{#isDateTime}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}time.Time
	if query.Has("{{baseName}}"){
		param, err := parseTime(query.Get("{{baseName}}"))
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx &RequiredError{"{{baseName}}"})
		return
		{{/required}}
	}
	{{/isDateTime}}
	{{#isNumber}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}float32
	if query.Has("{{baseName}}") {
		param, err := parseNumericParameter[float32](
			query.Get("{{baseName}}"),
			WithParse[float32](parseFloat32),{{#minimum}}
			WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[float32]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param float32 = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isNumber}}
	{{#isFloat}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}float32
	if query.Has("{{baseName}}") {
		param, err := parseNumericParameter[float32](
			query.Get("{{baseName}}"),
			WithParse[float32](parseFloat32),{{#minimum}}
			WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[float32]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param float32 = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isFloat}}
	{{#isDouble}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}float64
	if query.Has("{{baseName}}") {
		param, err := parseNumericParameter[float64](
			query.Get("{{baseName}}"),
			WithParse[float64](parseFloat64),{{#minimum}}
			WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[float64]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param float64 = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isDouble}}
	{{#isLong}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}int64
	if query.Has("{{baseName}}") {
		param, err := parseNumericParameter[int64](
			query.Get("{{baseName}}"),
			WithParse[int64](parseInt64),{{#minimum}}
			WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[int64]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param int64 = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isLong}}
	{{#isInteger}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}int32
	if query.Has("{{baseName}}") {
		param, err := parseNumericParameter[int32](
			query.Get("{{baseName}}"),
			WithParse[int32](parseInt32),{{#minimum}}
			WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[int32]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param int32 = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isInteger}}
	{{#isBoolean}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}bool
	if query.Has("{{baseName}}") {
		param, err := parseBoolParameter(
			query.Get("{{baseName}}"),
			WithParse[bool](parseBool),{{#minimum}}
			WithMinimum[bool]({{minimum}}),{{/minimum}}{{#maximum}}
			WithMaximum[bool]({{maximum}}),{{/maximum}}
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		var param bool = {{defaultValue}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isBoolean}}
	{{#isArray}}
	{{#items.isNumber}}
	{{paramName}}Param, err := parseNumericArrayParameter[float32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float32](parseFloat32),{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/items.isNumber}}
	{{#items.isFloat}}
	{{paramName}}Param, err := parseNumericArrayParameter[float32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float32](parseFloat32),{{#minimum}}
		WithMinimum[float32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
	return
	}
	{{/items.isFloat}}
	{{#items.isDouble}}
	{{paramName}}Param, err := parseNumericArrayParameter[float64](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[float64](parseFloat64),{{#minimum}}
		WithMinimum[float64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[float64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/items.isDouble}}
	{{#items.isLong}}
	{{paramName}}Param, err := parseNumericArrayParameter[int64](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[int64](parseInt64),{{#minimum}}
		WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/items.isLong}}
	{{#items.isInteger}}
	{{paramName}}Param, err := parseNumericArrayParameter[int32](
		query.Get("{{baseName}}"), ",", {{required}},
		WithParse[int32](parseInt32),{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/items.isInteger}}
	{{#items.isDateTime}}
	{{paramName}}Param, err := parseTimes(query.Get("{{baseName"}}))
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/items.isDateTime}}
	{{^items.isNumber}}
	{{^items.isFloat}}
	{{^items.isDouble}}
	{{^items.isLong}}
	{{^items.isInteger}}
	{{^items.isEnumRef}}
	var {{paramName}}Param []string
	if query.Has("{{baseName}}") {
		{{paramName}}Param = strings.Split(query.Get("{{baseName}}"), ",")
	}
	{{/items.isEnumRef}}
	{{#items.isEnumRef}}
	var {{paramName}}Param []{{items.dataType}}
	if query.Has("{{baseName}}") {
		paramSplits := strings.Split(query.Get("{{baseName}}"), ",")
		{{paramName}}Param = make([]{{items.dataType}}, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := New{{items.dataType}}FromValue(param)
			if err != nil {
				c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
				return
			}
			{{paramName}}Param = append({{paramName}}Param, paramEnum)
		}
	}
	{{/items.isEnumRef}}
	{{/items.isInteger}}
	{{/items.isLong}}
	{{/items.isDouble}}
	{{/items.isFloat}}
	{{/items.isNumber}}
	{{/isArray}}
	{{^isNumber}}
	{{^isFloat}}
	{{^isDouble}}
	{{^isLong}}
	{{^isInteger}}
	{{^isBoolean}}
	{{^isArray}}
	{{^isDateTime}}
	var {{paramName}}Param {{#isNullable}}*{{/isNullable}}{{dataType}}
	if query.Has("{{baseName}}") {
		param := {{^isString}}{{dataType}}({{/isString}}query.Get("{{baseName}}"){{^isString}}){{/isString}}

		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
	} else {
		{{#required}}
		c.errorHandler(ctx, &RequiredError{Field: "{{baseName}}"})
		return
		{{/required}}
		{{^required}}
		{{#defaultValue}}
		param := {{^isString}}{{dataType}}({{/isString}}"{{defaultValue}}"{{^isString}}){{/isString}}
		{{paramName}}Param = {{#isNullable}}&{{/isNullable}}param
		{{/defaultValue}}
		{{/required}}
	}
	{{/isDateTime}}
	{{/isArray}}
	{{/isBoolean}}
	{{/isInteger}}
	{{/isLong}}
	{{/isDouble}}
	{{/isFloat}}
	{{/isNumber}}
	{{/isQueryParam}}
	{{#isFormParam}}
	{{#isFile}}
	var {{paramName}}Param {{#isArray}}[]*os.File{{/isArray}}{{^isArray}}*os.File{{/isArray}}
	{
	{{#isArray}}
		param, err := ReadFormFilesToTempFiles(ctx.Request, "{{baseName}}")
		{{/isArray}}
		{{^isArray}}
		param, err := ReadFormFileToTempFile(ctx.Request, "{{baseName}}")
		{{/isArray}}
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
			return
		}

		{{paramName}}Param = param
	}
	{{/isFile}}
	{{#isLong}}{{#isArray}}
	{{paramName}}Param, err := parseNumericArrayParameter[int64](
		ctx.PostForm("{{baseName}}"), ",", {{required}},
		WithParse[int64](parseInt64),{{#minimum}}
		WithMinimum[int64]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int64]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isArray}}{{/isLong}}
	{{#isInteger}}{{#isArray}}
	{{paramName}}Param, err := parseNumericArrayParameter[int32](
		ctx.PostForm("{{baseName}}"), ",", {{required}},
		WithParse[int32](parseInt32),{{#minimum}}
		WithMinimum[int32]({{minimum}}),{{/minimum}}{{#maximum}}
		WithMaximum[int32]({{maximum}}),{{/maximum}}
	)
	if err != nil {
		c.errorHandler(ctx, &ParsingError{Param: "{{baseName}}", Err: err})
		return
	}
	{{/isArray}}{{/isInteger}}
	{{^isFile}}
	{{^isLong}}
	{{#isArray}}
	{{paramName}}Param := strings.Split(ctx.PostForm("{{baseName}}"), ",")
	{{/isArray}}
	{{^isArray}}
	{{paramName}}Param := ctx.PostForm("{{baseName}}")
	{{/isArray}}
	{{/isLong}}
	{{/isFile}}
	{{/isFormParam}}
	{{#isHeaderParam}}
	{{paramName}}Param := ctx.GetHeader("{{baseName}}")
	{{/isHeaderParam}}
	{{#isBodyParam}}
	{{paramName}}Param := {{dataType}}{}
	if err := ctx.ShouldBindJSON(&{{paramName}}Param); err!= nil {
            c.errorHandler(ctx, &ParsingError{Err: err})
            return
    }

	{{#isArray}}
		{{#items.isModel}}
	for _, el := range {{paramName}}Param {
		if err := Assert{{baseType}}Required(el); err != nil {
			c.errorHandler(ctx, err)
			return
		}
	}
		{{/items.isModel}}
	{{/isArray}}
	{{^isArray}}
		{{#isModel}}
	if err := Assert{{baseType}}Required({{paramName}}Param); err != nil {
		c.errorHandler(ctx, err)
		return
	}
	if err := Assert{{baseType}}Constraints({{paramName}}Param); err != nil {
		c.errorHandler(ctx, err)
		return
	}
		{{/isModel}}
	{{/isArray}}
	{{/isBodyParam}}
	{{/allParams}}
	{{#returnType}}result, {{/returnType}}errCall := c.service.{{nickname}}(ctx.Request.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	{{#returnType}}
	ctx.JSON(http.StatusOK, result)
	{{/returnType}}

	{{^returnType}}
	ctx.JSON(http.StatusOK, nil)
	{{/returnType}}
	// If no error, encode the body and the result code
	
}{{/operation}}{{/operations}}
