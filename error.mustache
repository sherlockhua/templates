{{>partial_header}}
package {{packageName}}

import (
	"errors"
	"fmt"
	"net/http"
	"github.com/gin-gonic/gin"
)

var (
	// ErrTypeAssertionError is thrown when type an interface does not match the asserted type
	ErrTypeAssertionError = errors.New("unable to assert type")
	ErrValueIsNullString = errors.New("value is null string")
)

// ParsingError indicates that an error has occurred when parsing request parameters
type ParsingError struct {
	Param string
	Err   error
}

func (e *ParsingError) Unwrap() error {
	return e.Err
}

func (e *ParsingError) Error() string {
	if e.Param == "" {
		return e.Err.Error()
	}

	return e.Param + ": " + e.Err.Error()
}

// RequiredError indicates that an error has occurred when parsing request parameters
type RequiredError struct {
	Field string
}

func (e *RequiredError) Error() string {
	return fmt.Sprintf("required field '%s' is zero value.", e.Field)
}

// ErrorHandler defines the required method for handling error. You may implement it and inject this into a controller if
// you would like errors to be handled differently from the DefaultErrorHandler
type ErrorHandler func(ctx  *gin.Context,  err error)

// DefaultErrorHandler defines the default logic on how to handle errors from the controller. Any errors from parsing
// request params will return a StatusBadRequest. Otherwise, the error code originating from the servicer will be used.
func DefaultErrorHandler(ctx  *gin.Context, err error) {
	var parsingErr *ParsingError
	if ok := errors.As(err, &parsingErr); ok {
		// Handle parsing errors
		ctx.AbortWithStatus(http.StatusBadRequest)
		return
	}

	var requiredErr *RequiredError
	if ok := errors.As(err, &requiredErr); ok {
		// Handle missing required errors
		ctx.AbortWithStatus(http.StatusUnprocessableEntity)
		return
	} 

    // Handle any other errors
	ctx.AbortWithStatus(http.StatusInternalServerError)
}
